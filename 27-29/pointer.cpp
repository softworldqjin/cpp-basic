
int main()
{
	// 포인터 변수
	// 주소를 저장하는 변수, 저장되는 것은 주소 그 자체(주소 첫번째)이고, 
	// 그 주소부터 몇바이트 만큼 접근할건지, 
	// int 라면 4byte 접근할거임

	int i = 100;
	float f = 3.f;

	int* pInt = (int*)&f; //(int*) 강제캐스팅
						  //이 포인터 변수는 주소를 넣어줬을 때, 그곳을 int로 해석하는 포인터

						// 메모리 안에 데이터(0000)는 똑같은데, 이걸 어떻게 해석하는 것이 중요
						// 
						// f에 3.0f를 저장하면, float의 IEEE 754 규칙에 따라 메모리에 32비트 값이 들어감
						// 그 값이 바로 16진수로 0x40400000이고, 2진수로 쓰면
						// 0100 0000 0100 0000 0000 0000 0000 0000
						// 이건 부동소수점 규칙으로 해석했을 때 3.0이라는 의미

						// 그런데 pInt를 통해 * pInt를 읽으면, 컴파일러는 저 32비트를 정수(int) 규칙으로 해석함
						// 즉, 같은 2진수를 이번에는 정수로 해석하는 거임
						// 0100 0000 0100 0000 0000 0000 0000 0000
						// 위를 정수라고 해석하면 → 1077936128
						   
						// 메모리 속 비트 : 변함없음(0x40400000)
						// 해석 규칙 : 바뀜(float → int)
						// 그래서 값이 전혀 달라져 보이는 것

	// 주소로 접근
	i = *pInt; 

	// 주소의 단위
	// byte

	return 0;
}