					//0x00은 16진수 표기법, 2진수 00000000000000000000000000000000
#define HUNGRY 0x1	//16^0 * 1 = 1 -> 00000000000000000000000000000001	 
#define THIRSTY 0x2 //16^0 * 2 = 2 -> 00000000000000000000000000000010
#define TIRED 0x4	//16^0 * 4 = 4 -> 00000000000000000000000000000100
#define FIRE 0x8	//16^0 * 8 = 8 -> 00000000000000000000000000001000
#define COLD 0x10	//16^1 * 1 + 16^0 * 0 = 16 -> 
					//             -> 00000000000000000000000000010000
#include <stdio.h>
using namespace std;

//전역변수
int g_i = 0;

int Add(int left, int right)
{
	return left + right;
}

int main()
{
	
	unsigned int iStatus = 0; //32비트 짜리 00000000000000000000000000000000
							  //각 비트 한자리 마다 상태값 표현 가능 
							  //00000000000000000000000000000001 일때 HUNGRY
							  //00000000000000000000000000000010 일때 THRISTY
							  //이걸 비트 연산 합 | 하면 HUNGRY 이면서 THRISTY

	//상태 추가
	iStatus |= THIRSTY;

	//상태 확인
	//상태값을 체크할 때,, 너 목마른 상태임?
	if (iStatus & THIRSTY) {}	//만약 iStatus가 00000000000000000000000000000000 이면
							//THIRSTY 00000000000000000000000000000010 와 비트 곱하면 모두 0되서 false 즉, 목마른 상태 아님.
							//만약 iStatus가 00000000000000000000000000000010 이면
							//00000000000000000000000000000010 이 되서 true
	//상태 제거
	//특정 자리 비트 제거
	iStatus &= ~THIRSTY;
						//목마름을 제거할려면?
						//목마름을 반전시키고, 그걸 비트 곱으로 하면 됨
						//iStatus 00000000000000000000000000000010 ->  iStatus 00000000000000000000000000000010 
						//THIRSTY 00000000000000000000000000000010 -> ~THIRSTY 11111111111111111111111111111101 논리곱(&)
						//										   ->  iStatus 00000000000000000000000000000000 목마른 상태 벗어남.

	//변수
	//1. 지역변수
	//2. 전역변수
	//3. 정적변수
	//4. 외부변수
	

	//지역변수
	int iName = 0;

	//괄호 안에 선언된 변수(함수, 지역)
	{
		//변수명 규칙
		int iName = 100;

		iName; //가까운거를 우선순위로, 괄호로 영역을 또 만들어서 구별이 가능함
	}
	iName = 100; //괄호 밖에 iName 건들임

	int num = Add(10, 20);

	//반복문
	//for()
	for (int i = 0; i < 4; ++i)
	{
		if (i % 2 == 0)
		{
			continue;
		}
		printf("Output test\n");
	}

	//while()
	int i = 0;
	while (i < 10)
	{
		//continue;
		//break;
		++i;
	}
	return 0;
}

//단축키
//f9 브레이크 포인터
//f10 한 프로시져 단위 실행
//f11 한 단계씩 단위 실행