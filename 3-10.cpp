#define HUNGRY 1
#define MAX_SIZE 20 //음료수 자판기 최대 수용량 20개
					//더 큰 자판기로 바꾼다면 그냥 40으로 수정(유지 보수 GOAT)

int main()
{
	//음의 정수 찾기(2의 보수법)
	//1의 보수(모든 비트 반전) -> 2의 보수(+1)
	int a = 4 + 4.0; //4.0은 자동 형변환됨 - 암시적 형변환 (int)4.0

	//정수표현 방식과 실수 표현 방식은 다르다
	//실수 표현방식은 정밀도(비트 수)에 의존한다.
	//따라서 double(8) 자료형이 float(4) 보다 더 아래의 소수점까지 정확하게 표현이 가능하다

	//정수는 정수끼리, 실수는 실수끼리 연산하되, 두 표현방식의 피 연산자가 연산될 경우 명시적으로 변환.

	float f = 10.2415f + (float)20; //f를 붙이면 4바이트 실수, 안붙이면 double로 8바이트 실수


	//연산자
	//대입 연산자 = 
	//산술 연산자 + - * / %(피연산자가 모두 정수일 때 연산 가능)
	//++ --
	//한 단계 증가 또는 감소

	int data = 10 + 10;
	data += 10;

	//Error
	//data = 10 % 3.0;
	
	data = 10.0 / 3.0; //data = (int)(10.0 / 3.0); 암시적 형변환되서 저장됨

	a = 10;
	data = a++; // = 대입연산자보다 느린, ++ 후위증가 연산자
	//습관적으로 ++a 전위증가 연산자로 쓸 것. >> 연산자 오버라이딩할 때 효율이 훨씬 좋다
	
	
	//논리연산자
	// !(역) &&(And) ||(Or)
	// 참(true) 거짓(false)
	// 참 0이 아닌 모든 값 -> 1 출력
	// 거짓 : 0

	//bool은 1byte 0또는 1
	bool trueFalse = true; //true를 1로 본다, false면 0으로
	trueFalse = 100; // 참으로.. 1 저장

	int iTrue = 100;
	iTrue = !iTrue; //iTrue를 0으로

	iTrue = 100 & 200; // 참 && 참 -> 1
	iTrue = 0 && 200; // 거짓 && 참 -> 0
	iTrue = 0 || 200; // 거짓 || 참 - > 1
	iTrue = 0 || 0; // 거짓 || 거짓 - > 0

	// if, else if, else
	data = 0;
	if (0 && 200)
	{
		data = 100;
	}

	//if () 방향키 위 -> 위로 이동
	//if () 방향키 위 + 오른쪽 - > 오른쪽 대각선 이동, if else if구문이였다면 키 두개 눌러도 대각선 이동 못함

	switch (20)
	{
	case 10:
		break;
	case 20:
		break;
	default:
		break; //break안하면 그 밑 break나올때까지 수행함.
	}

	// 삼항 연산자
	// ( ) ? a : b

	int iTest = 10;

	iTest == 10 ? iTest = 10 : iTest = 20;

	if (iTest == 10)
	{
		iTest = 10;
	}
	else
	{
		iTest = 20;
	}

	// 비트 연산자 
	// 밀고 0으로 채워 2^n
	// 시프트 <<1 00000001 -> 00000010 1에서 2 ||| <<1 2곱하기, <<2 4곱하기, <<3 8곱하기
	// 시프트 >>1 00000001 -> 00000000 1에서 0 ||| >>1 2나누기한 몫(1/2 곱하기), >>2 4나누기, >>3 8나누기

	unsigned char byte = 1;
	byte <<= 1;

	// 비트 곱(&), 합(|), xor(^), 반전(~)
	// 비트 단위로 연산을 진행
	// & 둘다 1인 경우 1
	// | 둘중 하나라도 1 이면 1
	// ^ 같으면 0, 다르면 1
	// ~1은 0으로, 0은 1로

	int iStatus = HUNGRY; // #define HUNGRY 1, 전처리기로 HUNGRY를 1로, int iStatus = 1
						  // 배고픔 상태값을 전처리기로 정의, 배고픔 상태값 외울필요없음(이게 매크로)


	return 0;
}